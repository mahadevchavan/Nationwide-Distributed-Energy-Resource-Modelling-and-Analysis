import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue import DynamicFrame

args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Script generated for node Amazon S3
AmazonS3_node1709147439471 = glueContext.create_dynamic_frame.from_options(format_options={}, connection_type="s3", format="parquet", connection_options={"paths": ["s3://my-glue-etl-project/output/"], "recurse": True}, transformation_ctx="AmazonS3_node1709147439471")

# Script generated for node Change Schema
ChangeSchema_node1709147445155 = ApplyMapping.apply(frame=AmazonS3_node1709147439471, mappings=[("id_2", "bigint", "id_2", "long"), ("customer_class", "bigint", "customer_class", "long"), ("zipcode", "bigint", "zipcode", "long"), ("city", "bigint", "city", "long"), ("state", "bigint", "state", "long"), ("state_fips", "bigint", "state_fips", "long"), ("state_name", "bigint", "state_name", "long"), ("utility_service_territory", "bigint", "utility_service_territory", "long"), ("third_party_owned_flag", "bigint", "third_party_owned_flag", "long"), ("capacity_dc_kw", "bigint", "capacity_dc_kw", "long"), ("ground_mount_flag", "bigint", "ground_mount_flag", "long"), ("tracking_type", "bigint", "tracking_type", "long"), ("azimuth_1", "bigint", "azimuth_1", "long"), ("azimuth_2", "bigint", "azimuth_2", "long"), ("azimuth_3", "bigint", "azimuth_3", "long"), ("tilt_1", "bigint", "tilt_1", "long"), ("tilt_2", "bigint", "tilt_2", "long"), ("tilt_3", "bigint", "tilt_3", "long"), ("capacity_mod_2", "bigint", "capacity_mod_2", "long"), ("capacity_mod_3", "bigint", "capacity_mod_3", "long"), ("efficiency_2", "bigint", "efficiency_2", "long"), ("efficiency_3", "bigint", "efficiency_3", "long"), ("tech_class_primary", "bigint", "tech_class_primary", "long"), ("tech_class_primary_2", "bigint", "tech_class_primary_2", "long"), ("tech_class_primary_3", "bigint", "tech_class_primary_3", "long"), ("storage_flag", "bigint", "storage_flag", "long"), ("storage_year", "bigint", "storage_year", "long"), ("storage_capacity", "bigint", "storage_capacity", "long"), ("storage_energy", "bigint", "storage_energy", "long"), ("inverter_loading_ratio", "bigint", "inverter_loading_ratio", "long"), ("inverter_capacity_2", "bigint", "inverter_capacity_2", "long"), ("inverter_capacity_3", "bigint", "inverter_capacity_3", "long"), ("inverter_micro_flag_1", "bigint", "inverter_micro_flag_1", "long"), ("inverter_micro_flag_2", "bigint", "inverter_micro_flag_2", "long"), ("inverter_micro_flag_3", "bigint", "inverter_micro_flag_3", "long"), ("inverter_hybrid_flag_1", "bigint", "inverter_hybrid_flag_1", "long"), ("inverter_hybrid_flag_2", "bigint", "inverter_hybrid_flag_2", "long"), ("inverter_hybrid_flag_3", "bigint", "inverter_hybrid_flag_3", "long"), ("inverter_meter_flag_1", "bigint", "inverter_meter_flag_1", "long"), ("inverter_meter_flag_2", "bigint", "inverter_meter_flag_2", "long"), ("inverter_meter_flag_3", "bigint", "inverter_meter_flag_3", "long"), ("zip_original", "bigint", "zip_original", "long"), ("zip", "bigint", "zip", "long"), ("latitude", "bigint", "latitude", "long"), ("longitude", "bigint", "longitude", "long"), ("zip_city", "bigint", "zip_city", "long"), ("sub_id", "bigint", "sub_id", "long"), ("interconnect", "bigint", "interconnect", "long"), ("date_combined", "null", "date_combined", "date")], transformation_ctx="ChangeSchema_node1709147445155")

# Script generated for node Amazon Redshift
AmazonRedshift_node1709147450537 = glueContext.write_dynamic_frame.from_options(frame=ChangeSchema_node1709147445155, connection_type="redshift", connection_options={"redshiftTmpDir": "s3://aws-glue-assets-641574813619-ap-south-1/temporary/", "useConnectionProperties": "true", "dbtable": "public.rs_solar", "connectionName": "Redshift connection", "preactions": "CREATE TABLE IF NOT EXISTS public.rs_solar (id_2 BIGINT, customer_class BIGINT, zipcode BIGINT, city BIGINT, state BIGINT, state_fips BIGINT, state_name BIGINT, utility_service_territory BIGINT, third_party_owned_flag BIGINT, capacity_dc_kw BIGINT, ground_mount_flag BIGINT, tracking_type BIGINT, azimuth_1 BIGINT, azimuth_2 BIGINT, azimuth_3 BIGINT, tilt_1 BIGINT, tilt_2 BIGINT, tilt_3 BIGINT, capacity_mod_2 BIGINT, capacity_mod_3 BIGINT, efficiency_2 BIGINT, efficiency_3 BIGINT, tech_class_primary BIGINT, tech_class_primary_2 BIGINT, tech_class_primary_3 BIGINT, storage_flag BIGINT, storage_year BIGINT, storage_capacity BIGINT, storage_energy BIGINT, inverter_loading_ratio BIGINT, inverter_capacity_2 BIGINT, inverter_capacity_3 BIGINT, inverter_micro_flag_1 BIGINT, inverter_micro_flag_2 BIGINT, inverter_micro_flag_3 BIGINT, inverter_hybrid_flag_1 BIGINT, inverter_hybrid_flag_2 BIGINT, inverter_hybrid_flag_3 BIGINT, inverter_meter_flag_1 BIGINT, inverter_meter_flag_2 BIGINT, inverter_meter_flag_3 BIGINT, zip_original BIGINT, zip BIGINT, latitude BIGINT, longitude BIGINT, zip_city BIGINT, sub_id BIGINT, interconnect BIGINT, date_combined DATE);"}, transformation_ctx="AmazonRedshift_node1709147450537")

job.commit()